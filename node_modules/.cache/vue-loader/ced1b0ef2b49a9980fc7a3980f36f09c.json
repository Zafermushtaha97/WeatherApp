{"remainingRequest":"/home/zafer/vueprojects/weatherapp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/zafer/vueprojects/weatherapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/zafer/vueprojects/weatherapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/zafer/vueprojects/weatherapp/src/components/Weather.vue?vue&type=template&id=c5276018&scoped=true&","dependencies":[{"path":"/home/zafer/vueprojects/weatherapp/src/components/Weather.vue","mtime":1610806517675},{"path":"/home/zafer/vueprojects/weatherapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/zafer/vueprojects/weatherapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/zafer/vueprojects/weatherapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/zafer/vueprojects/weatherapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}